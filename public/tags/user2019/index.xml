<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>useR!2019 on Moritz Mueller-Navarra</title>
    <link>/tags/user2019/</link>
    <description>Recent content in useR!2019 on Moritz Mueller-Navarra</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <copyright> &amp;copy; Moritz Mueller-Navarra</copyright>
    <lastBuildDate>Sun, 14 Jul 2019 00:00:00 +0000</lastBuildDate>
    
	    <atom:link href="/tags/user2019/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>data.table - useR!2019 I</title>
      <link>/post/data-table-new-and-old-functions/</link>
      <pubDate>Sun, 14 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/data-table-new-and-old-functions/</guid>
      <description>


&lt;p&gt;This is the first post looking at the &lt;strong&gt;data.table&lt;/strong&gt; presentations from &lt;strong&gt;useR!2019&lt;/strong&gt; which was held in Toulouse from 2019-07-07 to 2019-10-10. For starters we are going to take a look at the presentations from &lt;em&gt;Arun Srinivasan&lt;/em&gt;, one of the main developers of &lt;strong&gt;data.table&lt;/strong&gt;. His talk is called &lt;strong&gt;THE #RDATATABLEPACKAGE
for fast, flexible and memory efficient data wrangling&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Talk Agenda:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;General data.table syntax&lt;/li&gt;
&lt;li&gt;Explaining .SD &amp;amp; .SDcols&lt;/li&gt;
&lt;li&gt;Optimisation &amp;amp; new functionalities&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;general-data.table-syntax&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;General data.table syntax&lt;/h2&gt;
&lt;p&gt;Following code chunk installs the development version of the package, which is needed for some functions explained below.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(&amp;quot;data.table&amp;quot;, repos=&amp;quot;https://Rdatatable.gitlab.io/data.table&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We start of with a simple expample.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(&amp;quot;data.table&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Paket &amp;#39;data.table&amp;#39; wurde unter R Version 3.6.1 erstellt&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We define a data.table DT using the &lt;code&gt;fread&lt;/code&gt; function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(DT &amp;lt;- fread(&amp;quot;id code valA valB
1 c 1 10
1 b 2 11
1 c 3 12
1 c 4 13
2 a 5 14
2 a 6 15
1 b 7 16
2 a 8 17
1 c 9 18&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    id code valA valB
## 1:  1    c    1   10
## 2:  1    b    2   11
## 3:  1    c    3   12
## 4:  1    c    4   13
## 5:  2    a    5   14
## 6:  2    a    6   15
## 7:  1    b    7   16
## 8:  2    a    8   17
## 9:  1    c    9   18&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The general data.table syntax is &lt;code&gt;DT[i, j, by]&lt;/code&gt;, which you can translate into: &lt;em&gt;i = on which rows, j = what to do (columns), grouped by what&lt;/em&gt;. So when we want to get the sum of &lt;code&gt;valA&lt;/code&gt;, we can simply do.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;DT[, sum(valA)]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 45&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We have not defined a &lt;code&gt;i&lt;/code&gt; nor &lt;code&gt;by&lt;/code&gt; argument here. This simply means we want to compute for all rows and grouping is not relevant. Now we group by &lt;code&gt;id&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;DT[, sum(valA), by = id]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    id V1
## 1:  1 26
## 2:  2 19&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can also name the outcome of the column directly. The &lt;code&gt;.()&lt;/code&gt; is an alias for &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;DT[, .(sumA = sum(valA)), by = id]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    id sumA
## 1:  1   26
## 2:  2   19&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When you pass a column to the &lt;code&gt;by&lt;/code&gt; argument, internally the number of the unique values for that column gets evaluated. Afterwards the rows are associated to the respective group. Then the expression provided in &lt;code&gt;j&lt;/code&gt;, &lt;code&gt;sum(valA)&lt;/code&gt; gets evaluated for the groups.&lt;/p&gt;
&lt;p&gt;This is a very simple example, but illustrates the general form quite nicely. &lt;em&gt;Arun&lt;/em&gt; introduces another simple example by passing an expression to the &lt;code&gt;i&lt;/code&gt; argument.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;DT[code != &amp;quot;b&amp;quot;, .(sumA = sum(valA)), by = id]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    id sumA
## 1:  1   17
## 2:  2   19&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we simply state that &lt;code&gt;code&lt;/code&gt; should be not equal to “b”. Very easy and logical syntax.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;explaining-.sd-.sdcols&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Explaining .SD &amp;amp; .SDcols&lt;/h2&gt;
&lt;p&gt;We are still operating on DT.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;DT&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    id code valA valB
## 1:  1    c    1   10
## 2:  1    b    2   11
## 3:  1    c    3   12
## 4:  1    c    4   13
## 5:  2    a    5   14
## 6:  2    a    6   15
## 7:  1    b    7   16
## 8:  2    a    8   17
## 9:  1    c    9   18&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;.SD&lt;/code&gt; stands for &lt;em&gt;Subset of Data&lt;/em&gt;. Together with &lt;code&gt;.SDcols&lt;/code&gt; we can use it to simply subset &lt;code&gt;DT&lt;/code&gt; by column names and then compute on this subset.&lt;/p&gt;
&lt;p&gt;You could do this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;DT[, .SD, .SDcols = &amp;quot;valA&amp;quot;]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    valA
## 1:    1
## 2:    2
## 3:    3
## 4:    4
## 5:    5
## 6:    6
## 7:    7
## 8:    8
## 9:    9&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This returns a &lt;code&gt;data.table&lt;/code&gt; object with one column &lt;code&gt;valA&lt;/code&gt;. You can of course pass more columns.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;DT[, .SD, .SDcols = c(&amp;quot;valA&amp;quot;, &amp;quot;valB&amp;quot;)]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    valA valB
## 1:    1   10
## 2:    2   11
## 3:    3   12
## 4:    4   13
## 5:    5   14
## 6:    6   15
## 7:    7   16
## 8:    8   17
## 9:    9   18&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can also use the &lt;code&gt;patterns&lt;/code&gt; function in &lt;code&gt;.SDcols&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;DT[, .SD, .SDcols = patterns(&amp;quot;^val&amp;quot;)]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    valA valB
## 1:    1   10
## 2:    2   11
## 3:    3   12
## 4:    4   13
## 5:    5   14
## 6:    6   15
## 7:    7   16
## 8:    8   17
## 9:    9   18&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;How can we use this functionality to compute the sum of &lt;code&gt;valA&lt;/code&gt; and &lt;code&gt;valB&lt;/code&gt; grouped by &lt;code&gt;id&lt;/code&gt; where &lt;code&gt;code != &#34;b&lt;/code&gt; ?
Easy :-)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;DT[code != &amp;quot;b&amp;quot;, lapply(.SD, sum), .SDcols = patterns(&amp;quot;^val&amp;quot;), by = &amp;quot;id&amp;quot;]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    id valA valB
## 1:  1   17   53
## 2:  2   19   46&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;patterns&lt;/code&gt; function only returns columns starting with &lt;em&gt;val&lt;/em&gt;.
&lt;code&gt;.SD&lt;/code&gt; contains all the columns, except for the grouping columns supplied in &lt;code&gt;by&lt;/code&gt;, for each group.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;DT[code != &amp;quot;b&amp;quot;, print(.SD), .SDcols = c(&amp;quot;code&amp;quot;,&amp;quot;valA&amp;quot;, &amp;quot;valB&amp;quot;), by = id]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    code valA valB
## 1:    c    1   10
## 2:    c    3   12
## 3:    c    4   13
## 4:    c    9   18
##    code valA valB
## 1:    a    5   14
## 2:    a    6   15
## 3:    a    8   17&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Empty data.table (0 rows and 1 cols): id&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once you grouped by &lt;code&gt;id&lt;/code&gt; only the columns &lt;code&gt;valA&lt;/code&gt; and &lt;code&gt;valB&lt;/code&gt; are being considered due to &lt;code&gt;.SDcols&lt;/code&gt;. We therefore compute the sums on these columns and not on &lt;code&gt;code&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;DT[code != &amp;quot;b&amp;quot;, print(.SD), .SDcols = c(&amp;quot;valA&amp;quot;, &amp;quot;valB&amp;quot;), by = id]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    valA valB
## 1:    1   10
## 2:    3   12
## 3:    4   13
## 4:    9   18
##    valA valB
## 1:    5   14
## 2:    6   15
## 3:    8   17&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Empty data.table (0 rows and 1 cols): id&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So how does this &lt;code&gt;lapply(.SD, sum)&lt;/code&gt; work? &lt;code&gt;lapply&lt;/code&gt; is the infamous base function which returns a list. We operate on &lt;code&gt;.SD&lt;/code&gt; and compute the sum of every column in &lt;code&gt;.SD&lt;/code&gt;. We take a step back and look at the &lt;code&gt;class&lt;/code&gt; and &lt;code&gt;typeof&lt;/code&gt; of &lt;code&gt;DT&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;class(DT)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;data.table&amp;quot; &amp;quot;data.frame&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;typeof(DT)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;list&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;typeof(DT[,.SD])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;list&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You find more information about &lt;code&gt;.SD&lt;/code&gt; in this &lt;em&gt;stackoverflow&lt;/em&gt; post:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/8508482/what-does-sd-stand-for-in-data-table-in-r&#34; class=&#34;uri&#34;&gt;https://stackoverflow.com/questions/8508482/what-does-sd-stand-for-in-data-table-in-r&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can also check &lt;code&gt;vignette(&#34;datatable-sd-usage&#34;)&lt;/code&gt; in the development version.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;optimisation-new-functionalities&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Optimisation &amp;amp; new functionalities&lt;/h2&gt;
&lt;p&gt;Arun presents optimisation principles for operations in &lt;code&gt;i&lt;/code&gt;, &lt;code&gt;j&lt;/code&gt; &amp;amp; &lt;code&gt;by&lt;/code&gt;.&lt;/p&gt;
&lt;div id=&#34;optimisation-in-i&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Optimisation in “i”&lt;/h3&gt;
&lt;p&gt;We create a &lt;code&gt;data.table&lt;/code&gt; which has 200 million rows and two columns &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dt &amp;lt;- data.table(x = sample(1e5, 2e8, TRUE), y = runif(2e8)) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we only return rows where the value of &lt;code&gt;x&lt;/code&gt; is in &lt;code&gt;1000:2000&lt;/code&gt;, we operate in &lt;code&gt;i&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;system.time(dt[x %in% 1000:2000])
system.time(dt[x %in% 1000:2000])&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This takes a while (~17s on my laptop), but running the expression a second time results in a substantial speed up (~4s total). Please note that this not a proper benchmark. The second time we call this the expression, it reuses the index created in the first run. This currently works for &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;%in%&lt;/code&gt; and is called &lt;em&gt;Auto indexing&lt;/em&gt;. The index is stored within the &lt;code&gt;data.table&lt;/code&gt; as an attribute.&lt;/p&gt;
&lt;p&gt;Now we create a &lt;code&gt;data.table&lt;/code&gt; with 20 columns and 50 million rows to demonstrate that expressions in &lt;code&gt;i&lt;/code&gt; can run in parallel.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dt &amp;lt;- setDT(lapply(1:20, function(x) sample(100, 5e7, TRUE))) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We operate in &lt;code&gt;i&lt;/code&gt; to return the rows, where &lt;code&gt;V1 &amp;gt; 50L&lt;/code&gt;. The column is processed in parallel.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;system.time(dt[V1 &amp;gt; 50L])&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can set the threads &lt;code&gt;data.table&lt;/code&gt; uses with and check the differences.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;setDTthreads(threads = 1L)
system.time(dt[V1 &amp;gt; 50L])
setDTTthreads(threads = 2L)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;optimisation-in-by&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Optimisation in “by”&lt;/h3&gt;
&lt;p&gt;Recently the radix order has been parallelised. We define a new data set (200 million rows, 2 cols, ~3GB).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dt &amp;lt;- data.table(x=sample(1e5, 2e8, TRUE), y=runif(2e8))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we run this expression, which returns the occurences grouped by &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dt[, .N, by = x]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;optimisation-in-j&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Optimisation in “j”&lt;/h3&gt;
&lt;p&gt;In &lt;code&gt;j&lt;/code&gt; certain functions are optimized. Arun mentions &lt;code&gt;mean&lt;/code&gt;, &lt;code&gt;median&lt;/code&gt;, &lt;code&gt;sum&lt;/code&gt;, &lt;code&gt;min&lt;/code&gt;, &lt;code&gt;max&lt;/code&gt;, &lt;code&gt;head&lt;/code&gt;, &lt;code&gt;tail&lt;/code&gt;.
We can see a difference, when comparing &lt;code&gt;base::mean&lt;/code&gt; with just calling &lt;code&gt;mean&lt;/code&gt; in &lt;code&gt;j&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dt[, lapply(.SD, base::mean), by=V1]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dt[, lapply(.SD, mean), by=V1]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Internally this expression uses the function &lt;code&gt;mean&lt;/code&gt; implemented by &lt;code&gt;data.table&lt;/code&gt; in &lt;em&gt;C&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;new-functionalities&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;New functionalities&lt;/h2&gt;
&lt;p&gt;The first function we are going to look at is &lt;code&gt;nafill&lt;/code&gt;. This function allows us to fill &lt;code&gt;NA&lt;/code&gt; values in a &lt;code&gt;data.table&lt;/code&gt; by a specific method, like &lt;em&gt;last observation carried forward (locf)&lt;/em&gt;. See &lt;code&gt;?data.table::nafill&lt;/code&gt; for more information.&lt;/p&gt;
&lt;div id=&#34;nafill&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;nafill&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;nafill&lt;/code&gt; is a function that fills missing values in a &lt;code&gt;data.table&lt;/code&gt;. We define &lt;code&gt;DT&lt;/code&gt; as follows.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(DT &amp;lt;- fread(&amp;quot;V1 V2 V3 V4
1 c NA 10
2 b 2 NA
NA c 3 NA
1 NA 4 NA
2 NA 5 14&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    V1   V2 V3 V4
## 1:  1    c NA 10
## 2:  2    b  2 NA
## 3: NA    c  3 NA
## 4:  1 &amp;lt;NA&amp;gt;  4 NA
## 5:  2 &amp;lt;NA&amp;gt;  5 14&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let us try to apply &lt;code&gt;nafill&lt;/code&gt; to this object. The function takes in three important arguments:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;nafill(x, type=c(&amp;quot;const&amp;quot;,&amp;quot;locf&amp;quot;,&amp;quot;nocb&amp;quot;), fill=NA,
       verbose=getOption(&amp;quot;datatable.verbose&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;x&lt;/code&gt; can be a vector, list, data.frame or data.table. The &lt;code&gt;type&lt;/code&gt; defines how the missing values should be filled.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;locf&lt;/code&gt; -&amp;gt; last observation carried forward&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nocb&lt;/code&gt; -&amp;gt; next observation carried backwards&lt;/li&gt;
&lt;li&gt;&lt;code&gt;const&lt;/code&gt; -&amp;gt; a constant&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#(DT &amp;lt;- nafill(DT, &amp;quot;locf&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Above code will throw an error indicating that we can only fill columns with type &lt;code&gt;numeric&lt;/code&gt; (double &amp;amp; integer). Here the &lt;code&gt;setnafill&lt;/code&gt; functions comes in handy:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#getting numeric cols

numeric_cols &amp;lt;- names(DT)[DT[, sapply(.SD, is.numeric)]]

setnafill(DT, &amp;quot;locf&amp;quot;, cols = numeric_cols)
DT[]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    V1   V2 V3 V4
## 1:  1    c NA 10
## 2:  2    b  2 10
## 3:  2    c  3 10
## 4:  1 &amp;lt;NA&amp;gt;  4 10
## 5:  2 &amp;lt;NA&amp;gt;  5 14&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This updates &lt;code&gt;DT&lt;/code&gt; by reference.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;frollmean-frollsum&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;frollmean &amp;amp; frollsum&lt;/h3&gt;
&lt;p&gt;Now we are going to explore the &lt;code&gt;frollmean&lt;/code&gt; and &lt;code&gt;frollsum&lt;/code&gt; functions. These functions allow us to compute rolling means and rolling sums.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;DT[, lapply(.SD, frollmean, 3), .SDcols = numeric_cols]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##          V1 V3       V4
## 1:       NA NA       NA
## 2:       NA NA       NA
## 3: 1.666667 NA 10.00000
## 4: 1.666667  3 10.00000
## 5: 1.666667  4 11.33333&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#see also ?frollsum&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;DT[, lapply(.SD, frollsum, 3), .SDcols = numeric_cols]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    V1 V3 V4
## 1: NA NA NA
## 2: NA NA NA
## 3:  5 NA 30
## 4:  5  9 30
## 5:  5 12 34&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;coalesce&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;coalesce&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;fcoalesce&lt;/code&gt; function fills missing values in a vector by trying to pull values from one or more candidate vectors.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x &amp;lt;- c(11L, NA, 13L, NA, 15L, NA)
y &amp;lt;- c(NA, 12L, 5L, NA, NA, NA)
z &amp;lt;- c(11L, NA, 1L, 14L, NA, NA)

fcoalesce(x, y, z)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 11 12 13 14 15 NA&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Given above syntax &lt;code&gt;fcoalesce&lt;/code&gt; tries to fill missing values in &lt;code&gt;x&lt;/code&gt; by looking at the corresponding elements of &lt;code&gt;y&lt;/code&gt; &amp;amp; &lt;code&gt;z&lt;/code&gt;. At the second index we find a missing value in &lt;code&gt;x&lt;/code&gt;, whereas &lt;code&gt;y = 12L ; z = NA&lt;/code&gt;. At the fourth index we find &lt;code&gt;y = NA ; z = 14L&lt;/code&gt;. So the new vector becomes &lt;code&gt;11 12 13 14 15 NA&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;helpful-links&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Helpful links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The talk: &lt;a href=&#34;https://www.youtube.com/watch?v=tWx1ooBSxFc&#34; class=&#34;uri&#34;&gt;https://www.youtube.com/watch?v=tWx1ooBSxFc&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Slides: &lt;a href=&#34;http://www.user2019.fr/static/pres/t258038.pdf&#34; class=&#34;uri&#34;&gt;http://www.user2019.fr/static/pres/t258038.pdf&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;github: &lt;a href=&#34;https://github.com/Rdatatable&#34; class=&#34;uri&#34;&gt;https://github.com/Rdatatable&lt;/a&gt;, &lt;a href=&#34;https://github.com/Rdatatable/data.table/wiki&#34; class=&#34;uri&#34;&gt;https://github.com/Rdatatable/data.table/wiki&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See you soon!&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
